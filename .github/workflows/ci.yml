name: P2P Chat CICD pipeline

on: [push, pull_request]

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  # Глобальные настройки для производительности
  BAZEL_STARTUP_OPTS: "--host_jvm_args=-Xmx2g --host_jvm_args=-Xms1g"

jobs:
  build-docker:
    name: Build CI Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    outputs:
      image_name: ${{ steps.meta_ci.outputs.tags }}
      build_triggered: ${{ steps.filter_base.outputs.dockerfile == 'true' || steps.filter_ci.outputs.dockerfile == 'true' }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Check for Dockerfile.base changes
        id: filter_base
        uses: dorny/paths-filter@v3
        with:
          filters: |
            dockerfile:
              - 'docker/Dockerfile.base'
      
      - name: Check for Dockerfile.ci changes
        id: filter_ci
        uses: dorny/paths-filter@v3
        with:
          filters: |
            dockerfile:
              - 'docker/Dockerfile.ci'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:master
      - name: Log in to GitHub Container Registry
        if: (steps.filter_ci.outputs.dockerfile == 'true' || steps.filter_base.outputs.dockerfile == 'true')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Set lowercase repository name
        id: repo
        run: echo "name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT
      
      - name: Extract Docker base metadata
        id: meta_base
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}/base-image
          tags: type=raw,value=main,enable=true
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Extract Docker ci metadata
        id: meta_ci
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ steps.repo.outputs.name }}/ci-image
          tags: type=raw,value=main,enable=true
          labels: |
            org.opencontainers.image.source=${{ github.repositoryUrl }}
            org.opencontainers.image.revision=${{ github.sha }}

      - name: Build and push Docker base image
        if: steps.filter_base.outputs.dockerfile == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.base
          push: true
          tags: ${{ steps.meta_base.outputs.tags }}
          labels: ${{ steps.meta_base.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker ci image
        if: (steps.filter_ci.outputs.dockerfile == 'true' || steps.filter_base.outputs.dockerfile == 'true')
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile.ci
          pull: true
          push: true
          tags: ${{ steps.meta_ci.outputs.tags }}
          labels: ${{ steps.meta_ci.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  backend-lint:
    name: Backend Lint & Format
    runs-on: ubuntu-latest
    needs: build-docker
    container:
      image: ${{ needs.build-docker.outputs.image_name }}
      options: --user 1001
    env:
      BAZEL_DISK_CACHE_DIR: /home/runner/.cache/bazel-disk-cache
      BAZEL_REPO_CACHE_DIR: /home/runner/.cache/bazel-repo-cache
      # Оптимизация производительности Bazel
      BAZEL_STARTUP_OPTS: "--host_jvm_args=-Xmx2g"
      USE_BAZEL_VERSION: "7.0.0"
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      # Кэширование Bazel используя GitHub Actions cache
      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/bazel-disk-cache
            /home/runner/.cache/bazel-repo-cache
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-lint-${{ hashFiles('**/BUILD.bazel', '**/MODULE.bazel', '**/WORKSPACE', '**/*.bzl', 'src/**', 'tests/**') }}
          restore-keys: |
            ${{ runner.os }}-bazel-lint-${{ hashFiles('**/BUILD.bazel', '**/MODULE.bazel', '**/WORKSPACE', '**/*.bzl') }}
            ${{ runner.os }}-bazel-lint-
            ${{ runner.os }}-bazel-
      
      # Кэширование Bazel workspace-specific директорий
      - name: Cache Bazel Workspace
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel/_bazel_*/install
            ~/.cache/bazel/_bazel_*/execroot/*/external
          key: ${{ runner.os }}-bazel-workspace-${{ hashFiles('**/MODULE.bazel', '**/MODULE.bazel.lock') }}
          restore-keys: |
            ${{ runner.os }}-bazel-workspace-
      
      - name: Create cache directories
        run: |
          echo "Creating cache directories for backend-lint..."
          echo "BAZEL_DISK_CACHE_DIR: ${BAZEL_DISK_CACHE_DIR}"
          echo "BAZEL_REPO_CACHE_DIR: ${BAZEL_REPO_CACHE_DIR}"
          mkdir -p "${BAZEL_DISK_CACHE_DIR}"
          mkdir -p "${BAZEL_REPO_CACHE_DIR}"
          mkdir -p ~/.cache/bazelisk
          mkdir -p ~/.cache/bazel
          # Ensure proper permissions and ownership
          chown -R 1001:1001 /home/runner/.cache || true
          chown -R 1001:1001 ~/.cache || true
          chmod -R 755 /home/runner/.cache || true
          chmod -R 755 ~/.cache || true
      
      - name: Check Code Formatting (clang-format)
        run: bazel test --config=ci --config=clang-format //...

      - name: Run Static Analysis (clang-tidy)
        run: bazel test --config=ci --config=clang-tidy //...

  backend-build-and-test:
    name: Backend Build & Test (${{ matrix.config }})
    runs-on: ubuntu-latest
    needs: build-docker
    container:
      image: ${{ needs.build-docker.outputs.image_name }}
      options: --user 1001
    env:
      BAZEL_DISK_CACHE_DIR: /home/runner/.cache/bazel-disk-cache
      BAZEL_REPO_CACHE_DIR: /home/runner/.cache/bazel-repo-cache
      # Оптимизация производительности Bazel
      BAZEL_STARTUP_OPTS: "--host_jvm_args=-Xmx2g"
      USE_BAZEL_VERSION: "7.0.0"
    strategy:
      fail-fast: false
      matrix:
        config: [debug, asan, ubsan, tsan]
    steps:
      - name: Check out code
        uses: actions/checkout@v4
      
      - name: Cache Bazel
        uses: actions/cache@v4
        with:
          path: |
            /home/runner/.cache/bazel-disk-cache
            /home/runner/.cache/bazel-repo-cache
            ~/.cache/bazelisk
            ~/.cache/bazel
          key: ${{ runner.os }}-bazel-${{ matrix.config }}-${{ hashFiles('**/BUILD.bazel', '**/MODULE.bazel', '**/WORKSPACE', '**/*.bzl', 'src/**', 'tests/**') }}
          restore-keys: |
            ${{ runner.os }}-bazel-${{ matrix.config }}-${{ hashFiles('**/BUILD.bazel', '**/MODULE.bazel', '**/WORKSPACE', '**/*.bzl') }}
            ${{ runner.os }}-bazel-${{ matrix.config }}-
            ${{ runner.os }}-bazel-
      
      - name: Cache Bazel Workspace
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/bazel/_bazel_*/install
            ~/.cache/bazel/_bazel_*/execroot/*/external
          key: ${{ runner.os }}-bazel-workspace-${{ matrix.config }}-${{ hashFiles('**/MODULE.bazel', '**/MODULE.bazel.lock') }}
          restore-keys: |
            ${{ runner.os }}-bazel-workspace-${{ matrix.config }}-
            ${{ runner.os }}-bazel-workspace-
      
      - name: Create cache directories
        run: |
          echo "Creating cache directories for backend-build-and-test..."
          echo "BAZEL_DISK_CACHE_DIR: ${BAZEL_DISK_CACHE_DIR}"
          echo "BAZEL_REPO_CACHE_DIR: ${BAZEL_REPO_CACHE_DIR}"
          mkdir -p "${BAZEL_DISK_CACHE_DIR}"
          mkdir -p "${BAZEL_REPO_CACHE_DIR}"
          mkdir -p ~/.cache/bazelisk
          mkdir -p ~/.cache/bazel
          # Ensure proper permissions and ownership
          chown -R 1001:1001 /home/runner/.cache || true
          chown -R 1001:1001 ~/.cache || true
          chmod -R 755 /home/runner/.cache || true
          chmod -R 755 ~/.cache || true
      
      - name: Build and Run Tests (${{ matrix.config }})
        run: bazel test --config=ci --config=${{ matrix.config }} //...

  build-and-test-frontend:
    name: Frontend Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get
        working-directory: p2p_chat_client

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        working-directory: p2p_chat_client

      - name: Analyze project source
        run: flutter analyze --fatal-warnings
        working-directory: p2p_chat_client

      - name: Run tests
        run: flutter test
        working-directory: p2p_chat_client

      - name: Build APK for main branch
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: flutter build apk
        working-directory: p2p_chat_client